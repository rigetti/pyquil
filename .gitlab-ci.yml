default:
  image: python:3.8
  tags:
    - ec2-docker

stages:
  - deploy
  - docker

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .cache/pip
    - .venv

.publish-pypi-public: &publish-pypi-public
  - poetry config http-basic.pypi rigetti $PUBLIC_PYPI_PASSWORD
  - poetry publish --build

####################################################################################################
# RELEASE-ONLY JOBS
####################################################################################################

.pypi-publish:
  stage: deploy
  script:
    - pip install --upgrade poetry
    - *publish-pypi-public
    - poetry version -s >> version_tag
  artifacts:
    paths:
      - version_tag

.docker-publish:
  image: docker:git
  stage: docker
  tags:
    - dockerd
  script:
    - export VERSION_TAG=$(cat version_tag)
    - echo "Publishing images:"
    - echo "  ${IMAGE}:${VERSION_TAG}"
    - echo "  ${IMAGE}:${EXTRA_TAG}"
    - docker -v
    - echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
    - docker build --build-arg pyquil_version=${VERSION_TAG} -t ${IMAGE}:${VERSION_TAG} -t ${IMAGE}:${EXTRA_TAG} .
    - docker push ${IMAGE}:${VERSION_TAG} && docker push ${IMAGE}:${EXTRA_TAG}
  after_script:
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${IMAGE})
    - docker run --rm ${IMAGE}:${VERSION_TAG} python -c "from pyquil import get_qc; qvm = get_qc('9q-qvm')"  # simple image verification
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${IMAGE})
  # sometimes pyquil isn't ready on PyPI right away, so add a retry if docker build fails
  retry:
    max: 2
    when: script_failure


# TODO: Migrate Docker Publish tasks to GitHub
# See https://github.com/rigetti/pyquil/issues/1548
PyPI Publish:
  services: []
  extends: .pypi-publish
  rules:
    - when: never

Docker Publish (RC):
  extends: .docker-publish
  needs: ["PyPI Publish"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-rc\.\d+$/
  variables:
    EXTRA_TAG: rc

Docker Publish (Final):
  services: []
  extends: .docker-publish
  needs: ["PyPI Publish"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  variables:
    EXTRA_TAG: latest
