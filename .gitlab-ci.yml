default:
  image: python:3.7
  tags:
    - ec2-docker

stages:
  - test
  - deploy
  - docker

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .cache/pip
    - .venv

.install-dephell: &install-dephell # Install dephell to auto-generate setup.py
  - curl -L https://raw.githubusercontent.com/rigetti/dephell/master/install.py | python

.install-npm: &install-npm
  - curl -sL https://deb.nodesource.com/setup_12.x | bash -
  - apt-get update
  - apt-get install -f -y nodejs
  - npm i

.publish-pypi-public: &publish-pypi-public
  - poetry config http-basic.pypi rigetti $PUBLIC_PYPI_PASSWORD
  - poetry publish --build

.publish-pypi-test: &publish-pypi-test
  - poetry config repositories.testpypi https://test.pypi.org/legacy/
  - poetry config http-basic.testpypi rigetti $TEST_PYPI_PASSWORD
  - poetry publish --build -r testpypi

# global build variables
variables:
  IMAGE: rigetti/forest
  QCS_SETTINGS_APPLICATIONS_PYQUIL_QVM_URL: "http://qvm:5000"
  QCS_SETTINGS_APPLICATIONS_PYQUIL_QUILC_URL: "tcp://quilc:5555"

# Docker images to spin up along with the various CI jobs
services:
  - name: rigetti/qvm
    alias: qvm
    command: ["-S"]
  - name: rigetti/quilc
    alias: quilc
    command: ["-R"]


####################################################################################################
# EVERY-COMMIT JOBS
####################################################################################################

Test Docs:
  stage: test
  script:
    - . scripts/ci_install_deps
    - apt-get update && apt-get install -y pandoc
    - poetry run make docs

Style:
  stage: test
  script:
    - . scripts/ci_install_deps
    - poetry run make check-all

Test Unit (3.7):
  stage: test
  image: python:3.7
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make test

Test e2e QPU (3.7):
  stage: test
  allow_failure: true
  image: python:3.7
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make e2e
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "rc"'

Test e2e QVM (3.7):
  stage: test
  image: python:3.7
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make e2e TEST_QUANTUM_PROCESSOR=2q-qvm

Test Unit (3.8):
  stage: test
  image: python:3.8
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make test

Test e2e QPU (3.8):
  stage: test
  allow_failure: true
  image: python:3.8
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make e2e
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "rc"'

Test e2e QVM (3.8):
  stage: test
  image: python:3.8
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make e2e TEST_QUANTUM_PROCESSOR=2q-qvm

Test Unit (3.9):
  stage: test
  image: python:3.9
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make test

Test e2e QPU (3.9):
  stage: test
  allow_failure: true
  image: python:3.9
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make e2e
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "rc"'

Test e2e QVM (3.9):
  stage: test
  image: python:3.9
  coverage: '/TOTAL.*?(\d+)\%/'
  script:
    - . scripts/ci_install_deps
    - poetry run make e2e TEST_QUANTUM_PROCESSOR=2q-qvm

Coverage:
  stage: test
  script:
    - . scripts/ci_install_deps
    - poetry run make coverage
  allow_failure: true


####################################################################################################
# BRANCH-ONLY JOBS
####################################################################################################

# NOTE: Running this job requires the following env vars to be set when triggering:
#  - GITHUB_TOKEN
#  - TEST_PYPI_PASSWORD
PyPI Publish Branch (TestPyPI):
  stage: deploy
  allow_failure: true
  script:
    - . scripts/ci_install_deps
    - *install-dephell
    - *install-npm
    - npx semantic-release --branches $CI_COMMIT_BRANCH --dry-run
    - export MOST_RECENT_VERSION=$(git describe --abbrev=0 --tags | sed 's/v//')
    - export VERSION_TAG="${MOST_RECENT_VERSION}.dev${CI_JOB_ID}"
    - poetry version "$VERSION_TAG"
    - dephell deps convert
    - *publish-pypi-test
  rules:
    # Skip this job if running on master or rc
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_BRANCH != "rc"'
      when: manual


####################################################################################################
# RELEASE-ONLY JOBS
####################################################################################################

.pypi-publish:
  stage: deploy
  script:
    - . scripts/ci_install_deps
    - *install-dephell
    - *install-npm
    # This performs the semantic-release configured in package.json.
    # Depending on the config, this may add a tag and then publish a GitLab/GitHub release.
    - npx semantic-release
    # This reads the tag chosen by semantic-release
    - *publish-pypi-public
    - poetry version -s >> version_tag
  artifacts:
    paths:
      - version_tag

.docker-publish:
  image: docker:git
  stage: docker
  tags:
    - dockerd
  script:
    - export VERSION_TAG=$(cat version_tag)
    - echo "Publishing images:"
    - echo "  ${IMAGE}:${VERSION_TAG}"
    - echo "  ${IMAGE}:${EXTRA_TAG}"
    - docker -v
    - echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
    - docker build --build-arg pyquil_version=${VERSION_TAG} -t ${IMAGE}:${VERSION_TAG} -t ${IMAGE}:${EXTRA_TAG} .
    - docker push ${IMAGE}:${VERSION_TAG} && docker push ${IMAGE}:${EXTRA_TAG}
  after_script:
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${IMAGE})
    - docker run --rm ${IMAGE}:${VERSION_TAG} python -c "from pyquil import get_qc; qvm = get_qc('9q-qvm')"  # simple image verification
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${IMAGE})
  # sometimes pyquil isn't ready on PyPI right away, so add a retry if docker build fails
  retry:
    max: 2
    when: script_failure


# PUBLISH RC
# -------------------------------

PyPI Publish (RC):
  extends: .pypi-publish
  rules:
    - if: '$CI_COMMIT_BRANCH == "rc"'

Docker Publish (RC):
  extends: .docker-publish
  needs: ["PyPI Publish (RC)"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "rc"'
  variables:
    EXTRA_TAG: rc


# PUBLISH FINAL RELEASE
# -------------------------------

PyPI Publish (Final):
  extends: .pypi-publish
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: manual

Docker Publish (Final):
  extends: .docker-publish
  needs: ["PyPI Publish (Final)"]
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  variables:
    EXTRA_TAG: latest
